-- xenCore API
-- Xenxier

-- Install by saving this code as 'xenCore' in your programs folder.

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --

-- Load using the following code:

-- os.loadAPI("xenCore")
-- appName = "myCoolApp"
-- appVersion = "2.56"
-- requestedCoreVer = "0.1"
-- xenCore.xenCore()


-- How to use menu:

-- (load api with code above)
-- 
-- commands = "command1 command2 command3"
--
-- while true do
--   xenCore.menu()
-- end
--
-- function command1()
--   print("Command1 Output")
-- end

-- Call functions using 'xenCore.functionName'

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --

-- If xenCore is ran as an application do:

aboutCore()

-- > API CORE

function xenCore()
  coreVer = "0.1"
  testVar()
end

function aboutCore()
  print("xenCore " .. coreVer)
  print("")
  print("A robust ComputerCraft API for holding common functions that would otherwise be copied between programs.")
  print("")
  print("Coded by: Benjamin Gwynn (Xenxier)")
  pause()
  termCore()
end

function testVar()
  if ignoreMissingAPIStrings == "true" then
    print("init: ignoring missing API strings. This is not recommended!")
  else
    if appName == "" then
      incompatibleApp()
    else
      print("init: appName: " .. appname)
    end

    if appVersion == "" then
      incompatibleApp()
    else
      print("init: appVersion: " .. appVersion)
    end
    
    if requestedCoreVer == coreVer then
      print("init: requestedCoreVer:" .. requestedCoreVer)
    elseif requestedCoreVer == "" then
      print("NO SPECIFIC API VERSION REQUESTED")
      print("Developers: Fix this by setting requestedCoreVer or temporarily enabling ignoreMissingAPIStrings.")
      print("")
      pause()
      termCore()
    elseif requestedCoreVer > coreVer then
      olderCore()
    elseif requestedCoreVer < coreVer then
      newerCore()
    end
  end
end

function incompatableApp()
  print("This application isn't compatible with xenCore.")
  print("Developers: Please state all required variables before calling xenCore.")
  pause()
  termCore()
end

function olderCore()
  print(appName .. " requires you to update xenCore for it to run.")
  print("This application requires xenCore " .. requestedCoreVer .. " to run. You are using version " .. coreVer)
  pause()
  termCore()
end

function newerCore()
  if specificCoreVer == "true" then
    print(appName .. " requires an older version of xenCore for it to run.")
    print("This application requires xenCore " .. requestedCoreVer .. " to run. You are using version " .. coreVer)
    pause()
    termCore()
  else
    print("init: app requested older core version, ignoring.")
  end
end

function termCore()
  print("Program terminated due to an xenCore error.")
  os.exit
end

function todo()
  print("This function is not avaliable in this version of xenCore.")
  print("")
  pause()
  termCore()
end

-- > API FEATURES

function pause()
    print("")
    print("Press enter to return to menu...")
    read("")
end

-- anyKey() will perform different to pause() in the near-future. Try to avoid using anyKey() until it is implanted.

function anyKey()
    pause()
end

function menu()
  term.clear()
  print(appName .. " " .. appVersion)
  print("xenCore " .. coreVer)
  print("")
  print("Commands:")
  print("")
  for friendlyCommandListString in string.gmatch(commands, ", ") do
    print(friendlyCommandListString)
  end
  print("")
  print("")
  print("Please type a command: ")
  commandInput = read()
  print("")
  commandFind()
end

function commandFind()
  todo()
end
